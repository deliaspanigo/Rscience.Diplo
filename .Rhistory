devtools::load_all()
Rscience.Diplo:::app_001_diplo()
selected_vr_pos <- 1
selected_factor_pos <- 2
BASE <- mtcars
VR <- BASE[,selected_vr_pos]
VR
FACTOR <- BASE[,selected_factor_pos]
FACTOR <- as.character(FACTOR)
FACTOR
RESULTADOS_ANOVA <- aov(VR ~ FACTOR)
summary(RESULTADOS_ANOVA)
shapiro.test(RESULTADOS_ANOVA$residuals)
bartlett.test(RESULTADOS_ANOVA$residual ~ FACTOR)
# Test de Tukey
TUKEY <- HSD.test(RESULTADOS_ANOVA, "FACTOR")
TUKEY
plotmeans(VR ~ FACTOR)
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
with({
vector_paths <- list.files("./data-raw", full.names = T, recursive = T)
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
for(x in 1:length(vector_xlsx_files)){
the_path <- vector_xlsx_files[x]
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada)
# Utilizar usethis::use_data para registrar el objeto en el paquete
nueva_sentencia <- paste0("usethis::use_data(", nombre_en_R, ", overwrite = TRUE)")
eval(parse(text = nueva_sentencia))
rm(base_cargada)
rm(nombre_en_R)
}
})
x <- 1
the_path <- vector_xlsx_files[x]
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada)
# Utilizar usethis::use_data para registrar el objeto en el paquete
nueva_sentencia <- paste0("usethis::use_data(", nombre_en_R, ", overwrite = TRUE)")
eval(parse(text = nueva_sentencia))
rm(base_cargada)
rm(nombre_en_R)
with({
vector_paths <- list.files("./data-raw", full.names = T, recursive = T)
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
for(x in 1:length(vector_xlsx_files)){
the_path <- vector_xlsx_files[x]
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada)
# Utilizar usethis::use_data para registrar el objeto en el paquete
nueva_sentencia <- paste0("usethis::use_data(", nombre_en_R, ", overwrite = TRUE)")
eval(parse(text = nueva_sentencia))
rm(base_cargada)
rm(nombre_en_R)
}
NULL
})
with({
# Asegúrate de que los paquetes necesarios estén instalados y cargados
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("usethis", quietly = TRUE)) {
install.packages("usethis")
}
library(openxlsx)
library(usethis)
# Comprobar si el directorio existe
if (!dir.exists("./data-raw")) {
stop("El directorio './data-raw' no existe.")
}
# Listar los archivos en el directorio especificado
vector_paths <- list.files("./data-raw", full.names = TRUE, recursive = TRUE)
# Filtrar los archivos que terminan en .xlsx
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
# Iterar sobre los archivos .xlsx
for (x in seq_along(vector_xlsx_files)) {
the_path <- vector_xlsx_files[x]
# Leer el archivo .xlsx
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada, envir = .GlobalEnv)
# Utilizar usethis::use_data para registrar el objeto en el paquete
usethis::use_data(list(nombre_en_R = get(nombre_en_R, envir = .GlobalEnv)), overwrite = TRUE, name = nombre_en_R)
# Limpiar el entorno
rm(list = nombre_en_R, envir = .GlobalEnv)
}
# Mensaje de éxito
cat("Todos los archivos .xlsx se han procesado correctamente.\n")
})
# Asegúrate de que los paquetes necesarios estén instalados y cargados
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("usethis", quietly = TRUE)) {
install.packages("usethis")
}
library(openxlsx)
library(usethis)
# Comprobar si el directorio existe
if (!dir.exists("./data-raw")) {
stop("El directorio './data-raw' no existe.")
}
# Listar los archivos en el directorio especificado
vector_paths <- list.files("./data-raw", full.names = TRUE, recursive = TRUE)
# Filtrar los archivos que terminan en .xlsx
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
# Iterar sobre los archivos .xlsx
for (x in seq_along(vector_xlsx_files)) {
the_path <- vector_xlsx_files[x]
# Leer el archivo .xlsx
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada, envir = .GlobalEnv)
# Utilizar usethis::use_data para registrar el objeto en el paquete
usethis::use_data(list(nombre_en_R = get(nombre_en_R, envir = .GlobalEnv)), overwrite = TRUE, name = nombre_en_R)
# Limpiar el entorno
rm(list = nombre_en_R, envir = .GlobalEnv)
}
# Asegúrate de que los paquetes necesarios estén instalados y cargados
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("usethis", quietly = TRUE)) {
install.packages("usethis")
}
library(openxlsx)
library(usethis)
# Comprobar si el directorio existe
if (!dir.exists("./data-raw")) {
stop("El directorio './data-raw' no existe.")
}
# Listar los archivos en el directorio especificado
vector_paths <- list.files("./data-raw", full.names = TRUE, recursive = TRUE)
# Filtrar los archivos que terminan en .xlsx
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
# Iterar sobre los archivos .xlsx
for (x in seq_along(vector_xlsx_files)) {
the_path <- vector_xlsx_files[x]
# Leer el archivo .xlsx
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada, envir = .GlobalEnv)
# Utilizar usethis::use_data para registrar el objeto en el paquete
usethis::use_data(list = nombre_en_R, overwrite = TRUE)
# Limpiar el entorno
rm(list = nombre_en_R, envir = .GlobalEnv)
}
# Mensaje de éxito
cat("Todos los archivos .xlsx se han procesado correctamente.\n")
with({
# Asegúrate de que los paquetes necesarios estén instalados y cargados
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("usethis", quietly = TRUE)) {
install.packages("usethis")
}
library(openxlsx)
library(usethis)
# Comprobar si el directorio existe
if (!dir.exists("./data-raw")) {
stop("El directorio './data-raw' no existe.")
}
# Listar los archivos en el directorio especificado
vector_paths <- list.files("./data-raw", full.names = TRUE, recursive = TRUE)
# Filtrar los archivos que terminan en .xlsx
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
# Iterar sobre los archivos .xlsx
for (x in seq_along(vector_xlsx_files)) {
the_path <- vector_xlsx_files[x]
# Leer el archivo .xlsx
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada, envir = .GlobalEnv)
# Utilizar usethis::use_data para registrar el objeto en el paquete
usethis::use_data(list = nombre_en_R, overwrite = TRUE)
# Limpiar el entorno
rm(list = nombre_en_R, envir = .GlobalEnv)
}
# Mensaje de éxito
cat("Todos los archivos .xlsx se han procesado correctamente.\n")
})
with({
# Asegúrate de que los paquetes necesarios estén instalados y cargados
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("usethis", quietly = TRUE)) {
install.packages("usethis")
}
library(openxlsx)
library(usethis)
# Comprobar si el directorio existe
if (!dir.exists("./data-raw")) {
stop("El directorio './data-raw' no existe.")
}
# Listar los archivos en el directorio especificado
vector_paths <- list.files("./data-raw", full.names = TRUE, recursive = TRUE)
# Filtrar los archivos que terminan en .xlsx
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
# Iterar sobre los archivos .xlsx
for (x in seq_along(vector_xlsx_files)) {
the_path <- vector_xlsx_files[x]
# Leer el archivo .xlsx
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada, envir = .GlobalEnv)
# Utilizar usethis::use_data para registrar el objeto en el paquete
usethis::use_data(list = nombre_en_R, overwrite = TRUE)
# Limpiar el entorno
rm(list = nombre_en_R, envir = .GlobalEnv)
}
# Mensaje de éxito
cat("Todos los archivos .xlsx se han procesado correctamente.\n")
}, return(NULL))
with({
# Asegúrate de que los paquetes necesarios estén instalados y cargados
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("usethis", quietly = TRUE)) {
install.packages("usethis")
}
library(openxlsx)
library(usethis)
# Comprobar si el directorio existe
if (!dir.exists("./data-raw")) {
stop("El directorio './data-raw' no existe.")
}
# Listar los archivos en el directorio especificado
vector_paths <- list.files("./data-raw", full.names = TRUE, recursive = TRUE)
# Filtrar los archivos que terminan en .xlsx
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
# Iterar sobre los archivos .xlsx
for (x in seq_along(vector_xlsx_files)) {
the_path <- vector_xlsx_files[x]
# Leer el archivo .xlsx
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada, envir = .GlobalEnv)
# Utilizar usethis::use_data para registrar el objeto en el paquete
usethis::use_data(list = nombre_en_R, overwrite = TRUE)
# Limpiar el entorno
rm(list = nombre_en_R, envir = .GlobalEnv)
}
# Mensaje de éxito
}, cat("Todos los archivos .xlsx se han procesado correctamente.\n"))
with({
# Asegúrate de que los paquetes necesarios estén instalados y cargados
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("usethis", quietly = TRUE)) {
install.packages("usethis")
}
library(openxlsx)
library(usethis)
# Comprobar si el directorio existe
if (!dir.exists("./data-raw")) {
stop("El directorio './data-raw' no existe.")
}
# Listar los archivos en el directorio especificado
vector_paths <- list.files("./data-raw", full.names = TRUE, recursive = TRUE)
# Filtrar los archivos que terminan en .xlsx
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
# Iterar sobre los archivos .xlsx
for (x in seq_along(vector_xlsx_files)) {
the_path <- vector_xlsx_files[x]
# Leer el archivo .xlsx
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada, envir = .GlobalEnv)
# Utilizar usethis::use_data para registrar el objeto en el paquete
usethis::use_data(list = nombre_en_R, overwrite = TRUE)
# Limpiar el entorno
rm(list = nombre_en_R, envir = .GlobalEnv)
}
}, cat("Todos los archivos .xlsx se han procesado correctamente.\n"))
lapply({
# Asegúrate de que los paquetes necesarios estén instalados y cargados
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("usethis", quietly = TRUE)) {
install.packages("usethis")
}
library(openxlsx)
library(usethis)
# Comprobar si el directorio existe
if (!dir.exists("./data-raw")) {
stop("El directorio './data-raw' no existe.")
}
# Listar los archivos en el directorio especificado
vector_paths <- list.files("./data-raw", full.names = TRUE, recursive = TRUE)
# Filtrar los archivos que terminan en .xlsx
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
# Iterar sobre los archivos .xlsx
for (x in seq_along(vector_xlsx_files)) {
the_path <- vector_xlsx_files[x]
# Leer el archivo .xlsx
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada, envir = .GlobalEnv)
# Utilizar usethis::use_data para registrar el objeto en el paquete
usethis::use_data(list = nombre_en_R, overwrite = TRUE)
# Limpiar el entorno
rm(list = nombre_en_R, envir = .GlobalEnv)
}
}, cat("Todos los archivos .xlsx se han procesado correctamente.\n"))
lapply(1,{
# Asegúrate de que los paquetes necesarios estén instalados y cargados
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("usethis", quietly = TRUE)) {
install.packages("usethis")
}
library(openxlsx)
library(usethis)
# Comprobar si el directorio existe
if (!dir.exists("./data-raw")) {
stop("El directorio './data-raw' no existe.")
}
# Listar los archivos en el directorio especificado
vector_paths <- list.files("./data-raw", full.names = TRUE, recursive = TRUE)
# Filtrar los archivos que terminan en .xlsx
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
# Iterar sobre los archivos .xlsx
for (x in seq_along(vector_xlsx_files)) {
the_path <- vector_xlsx_files[x]
# Leer el archivo .xlsx
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada, envir = .GlobalEnv)
# Utilizar usethis::use_data para registrar el objeto en el paquete
usethis::use_data(list = nombre_en_R, overwrite = TRUE)
# Limpiar el entorno
rm(list = nombre_en_R, envir = .GlobalEnv)
}
}, cat("Todos los archivos .xlsx se han procesado correctamente.\n"))
lapply(1,{
# Asegúrate de que los paquetes necesarios estén instalados y cargados
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("usethis", quietly = TRUE)) {
install.packages("usethis")
}
library(openxlsx)
library(usethis)
# Comprobar si el directorio existe
if (!dir.exists("./data-raw")) {
stop("El directorio './data-raw' no existe.")
}
# Listar los archivos en el directorio especificado
vector_paths <- list.files("./data-raw", full.names = TRUE, recursive = TRUE)
# Filtrar los archivos que terminan en .xlsx
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
# Iterar sobre los archivos .xlsx
for (x in seq_along(vector_xlsx_files)) {
the_path <- vector_xlsx_files[x]
# Leer el archivo .xlsx
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada, envir = .GlobalEnv)
# Utilizar usethis::use_data para registrar el objeto en el paquete
usethis::use_data(list = nombre_en_R, overwrite = TRUE)
# Limpiar el entorno
#rm(list = nombre_en_R, envir = .GlobalEnv)
}
cat("Todos los archivos .xlsx se han procesado correctamente.\n")
})
# Asegúrate de que los paquetes necesarios estén instalados y cargados
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("usethis", quietly = TRUE)) {
install.packages("usethis")
}
library(openxlsx)
library(usethis)
# Comprobar si el directorio existe
if (!dir.exists("./data-raw")) {
stop("El directorio './data-raw' no existe.")
}
# Listar los archivos en el directorio especificado
vector_paths <- list.files("./data-raw", full.names = TRUE, recursive = TRUE)
# Filtrar los archivos que terminan en .xlsx
vector_check_xlsx <- grepl("\\.xlsx$", vector_paths)
vector_xlsx_files <- vector_paths[vector_check_xlsx]
# Iterar sobre los archivos .xlsx
for (x in seq_along(vector_xlsx_files)) {
the_path <- vector_xlsx_files[x]
# Leer el archivo .xlsx
base_cargada <- openxlsx::read.xlsx(xlsxFile = the_path, sheet = 1)
# Obtener el nombre del objeto sin la extensión
nombre_en_R <- tools::file_path_sans_ext(basename(the_path))
# Asignar el objeto a un nombre en el entorno global
assign(nombre_en_R, base_cargada, envir = .GlobalEnv)
# Utilizar usethis::use_data para registrar el objeto en el paquete
usethis::use_data(list = nombre_en_R, overwrite = TRUE)
# Limpiar el entorno
rm(list = nombre_en_R, envir = .GlobalEnv)
}
# Mensaje de éxito
cat("Todos los archivos .xlsx se han procesado correctamente.\n")
devtools::load_all()
devtools::document()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
devtools::load_all()
Rscience.Diplo:::app_001_diplo()
